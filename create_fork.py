#!/usr/bin/env python3
"""
Script para criar fork ou novo reposit√≥rio quando n√£o h√° permiss√£o de push
Knowledge Base CLI - Alternativas de Deploy

Este script oferece v√°rias op√ß√µes quando voc√™ n√£o tem permiss√£o para
fazer push no reposit√≥rio original.
"""

import os
import subprocess
import sys
import json
from datetime import datetime


class GitHubAlternative:
    def __init__(self):
        self.original_repo = "https://github.com/moroni646/ct-coding-tank-ada-team-4"
        self.original_owner = "moroni646"
        self.original_name = "ct-coding-tank-ada-team-4"
        
    def run_command(self, command, capture_output=False):
        """Executa comando no shell"""
        try:
            if capture_output:
                result = subprocess.run(command, shell=True, capture_output=True, text=True)
                return result.returncode == 0, result.stdout.strip()
            else:
                result = subprocess.run(command, shell=True)
                return result.returncode == 0, ""
        except Exception as e:
            print(f"‚ùå Erro: {e}")
            return False, str(e)
    
    def check_gh_cli(self):
        """Verifica se GitHub CLI est√° instalado"""
        success, output = self.run_command("gh --version", capture_output=True)
        if success:
            print(f"‚úÖ GitHub CLI encontrado: {output.split()[0]}")
            return True
        else:
            print("‚ö†Ô∏è GitHub CLI n√£o encontrado")
            print("   Instale em: https://cli.github.com/")
            return False
    
    def check_git_auth(self):
        """Verifica autentica√ß√£o do Git"""
        success, output = self.run_command("gh auth status", capture_output=True)
        if success and "Logged in" in output:
            print("‚úÖ Autenticado no GitHub")
            return True
        else:
            print("‚ö†Ô∏è N√£o autenticado no GitHub")
            print("   Execute: gh auth login")
            return False
    
    def create_fork(self):
        """Cria fork do reposit√≥rio original"""
        print(f"üç¥ Criando fork de {self.original_repo}...")
        
        # Tenta criar fork
        success, output = self.run_command(f"gh repo fork {self.original_repo} --clone=false", capture_output=True)
        
        if success:
            print("‚úÖ Fork criado com sucesso!")
            # Obt√©m URL do fork
            success, username = self.run_command("gh api user --jq .login", capture_output=True)
            if success:
                fork_url = f"https://github.com/{username}/{self.original_name}"
                print(f"üìÇ Fork dispon√≠vel em: {fork_url}")
                return fork_url
        else:
            print(f"‚ùå Erro ao criar fork: {output}")
            return None
    
    def create_new_repo(self, repo_name=None):
        """Cria novo reposit√≥rio"""
        if not repo_name:
            repo_name = f"knowledge-base-cli-{datetime.now().strftime('%Y%m%d')}"
        
        print(f"üÜï Criando novo reposit√≥rio: {repo_name}...")
        
        # Cria reposit√≥rio
        success, output = self.run_command(
            f'gh repo create {repo_name} --public --description "Knowledge Base CLI - Sistema de Busca Inteligente"',
            capture_output=True
        )
        
        if success:
            print("‚úÖ Reposit√≥rio criado com sucesso!")
            success, username = self.run_command("gh api user --jq .login", capture_output=True)
            if success:
                new_repo_url = f"https://github.com/{username}/{repo_name}"
                print(f"üìÇ Reposit√≥rio dispon√≠vel em: {new_repo_url}")
                return new_repo_url
        else:
            print(f"‚ùå Erro ao criar reposit√≥rio: {output}")
            return None
    
    def update_remote(self, new_repo_url):
        """Atualiza remote origin para novo reposit√≥rio"""
        print(f"üîó Atualizando remote para: {new_repo_url}")
        
        # Remove remote atual
        self.run_command("git remote remove origin")
        
        # Adiciona novo remote
        success, _ = self.run_command(f"git remote add origin {new_repo_url}")
        
        if success:
            print("‚úÖ Remote atualizado com sucesso!")
            return True
        else:
            print("‚ùå Erro ao atualizar remote")
            return False
    
    def push_to_new_repo(self, repo_url):
        """Faz push para o novo reposit√≥rio"""
        print(f"üöÄ Fazendo push para {repo_url}...")
        
        success, _ = self.run_command("git push -u origin main")
        
        if success:
            print("‚úÖ Push realizado com sucesso!")
            print(f"üåê Acesse: {repo_url}")
            return True
        else:
            print("‚ùå Erro no push")
            return False
    
    def create_bundle(self):
        """Cria bundle Git para transfer√™ncia manual"""
        bundle_name = f"knowledge-base-cli-{datetime.now().strftime('%Y%m%d-%H%M%S')}.bundle"
        
        print(f"üì¶ Criando bundle: {bundle_name}")
        
        success, _ = self.run_command(f"git bundle create {bundle_name} --all")
        
        if success:
            print(f"‚úÖ Bundle criado: {bundle_name}")
            print("üìã Para usar o bundle:")
            print(f"   git clone {bundle_name} knowledge-base-cli")
            print("   cd knowledge-base-cli")
            print("   git remote set-url origin <NEW_REPO_URL>")
            print("   git push -u origin main")
            return bundle_name
        else:
            print("‚ùå Erro ao criar bundle")
            return None
    
    def show_manual_steps(self):
        """Mostra passos manuais para deploy"""
        print("\n" + "="*60)
        print("üìã PASSOS MANUAIS PARA DEPLOY")
        print("="*60)
        print("\n1. üç¥ CRIAR FORK (Recomendado):")
        print(f"   ‚Ä¢ Acesse: {self.original_repo}")
        print("   ‚Ä¢ Clique em 'Fork' no canto superior direito")
        print("   ‚Ä¢ Aguarde a cria√ß√£o do fork")
        print("   ‚Ä¢ Copie a URL do seu fork")
        print("\n2. üîó ATUALIZAR REMOTE:")
        print("   git remote set-url origin <SEU_FORK_URL>")
        print("\n3. üöÄ FAZER PUSH:")
        print("   git push -u origin main")
        print("\n4. üÜï CRIAR NOVO REPOSIT√ìRIO:")
        print("   ‚Ä¢ Acesse: https://github.com/new")
        print("   ‚Ä¢ Nome: knowledge-base-cli")
        print("   ‚Ä¢ Descri√ß√£o: Sistema de Busca Inteligente")
        print("   ‚Ä¢ Tipo: P√∫blico")
        print("   ‚Ä¢ Clique em 'Create repository'")
        print("\n5. üìû SOLICITAR COLABORA√á√ÉO:")
        print("   ‚Ä¢ Contate o dono do reposit√≥rio original")
        print("   ‚Ä¢ Solicite acesso como colaborador")
        print("   ‚Ä¢ Aguarde convite por email")
        print("\n" + "="*60)
    
    def show_menu(self):
        """Mostra menu de op√ß√µes"""
        print("\nüîß SOLU√á√ïES PARA PROBLEMA DE PERMISS√ÉO")
        print("="*50)
        print("1. üç¥ Criar fork do reposit√≥rio original")
        print("2. üÜï Criar novo reposit√≥rio")
        print("3. üì¶ Criar bundle para transfer√™ncia")
        print("4. üìã Ver passos manuais")
        print("5. ‚ùå Sair")
        print("="*50)
        
        choice = input("\nEscolha uma op√ß√£o (1-5): ").strip()
        return choice
    
    def run(self):
        """Executa o script principal"""
        print("üöÄ Knowledge Base CLI - Solu√ß√µes de Deploy")
        print(f"‚ö†Ô∏è Problema: Sem permiss√£o para {self.original_repo}")
        print("="*60)
        
        # Verifica se est√° em um reposit√≥rio Git
        if not os.path.exists('.git'):
            print("‚ùå N√£o estamos em um reposit√≥rio Git!")
            print("   Execute primeiro: python setup_git.py")
            return False
        
        while True:
            choice = self.show_menu()
            
            if choice == "1":
                # Criar fork
                if self.check_gh_cli() and self.check_git_auth():
                    fork_url = self.create_fork()
                    if fork_url:
                        if self.update_remote(fork_url):
                            self.push_to_new_repo(fork_url)
                else:
                    print("‚ö†Ô∏è GitHub CLI necess√°rio para esta op√ß√£o")
                    self.show_manual_steps()
                break
                
            elif choice == "2":
                # Criar novo reposit√≥rio
                if self.check_gh_cli() and self.check_git_auth():
                    repo_name = input("Nome do reposit√≥rio (Enter para auto): ").strip()
                    new_repo_url = self.create_new_repo(repo_name or None)
                    if new_repo_url:
                        if self.update_remote(new_repo_url):
                            self.push_to_new_repo(new_repo_url)
                else:
                    print("‚ö†Ô∏è GitHub CLI necess√°rio para esta op√ß√£o")
                    self.show_manual_steps()
                break
                
            elif choice == "3":
                # Criar bundle
                self.create_bundle()
                break
                
            elif choice == "4":
                # Passos manuais
                self.show_manual_steps()
                break
                
            elif choice == "5":
                # Sair
                print("üëã Saindo...")
                break
                
            else:
                print("‚ùå Op√ß√£o inv√°lida! Tente novamente.")
        
        return True


def main():
    """Fun√ß√£o principal"""
    alternative = GitHubAlternative()
    
    try:
        success = alternative.run()
        if success:
            sys.exit(0)
        else:
            sys.exit(1)
    except KeyboardInterrupt:
        print("\n‚è∏Ô∏è Opera√ß√£o cancelada")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
